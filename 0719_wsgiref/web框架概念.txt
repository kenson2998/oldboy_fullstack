創建指令
django-admin startproject mysite
python manage.py startapp blog

web服務器 : 用於解析HTTP協議
Apache 、 Nginx

外部應用: 用於和外部服務器溝通

外部框架
Django Flask


外部服務網關接口:
WSGI
外部框架和外部服務器溝通是透過WSGI(Web Server Gateway Interface)

MVC架構與MTV架構

Model 模型:
負責業務對象與數據庫對象(ORM)

Control 控制:
接收客戶輸入調用模型和視圖完成用戶的請求

Template 模板:
負責如何把頁面展示給用戶

View 視圖:
負責用戶的交互(頁面)


Django 可以叫MTV也可以叫MVC
你跟Java、PHP的說 MTV他們不懂



views.py 中的 return render() 其實也是回傳HttpResponse
頁面渲染:
render(request,"register.html")
return render_to_response("register.html")  不需要回傳request

頁面跳轉:
redirect("路徑")
locals() 可以將函數中所有變量傳給模板


setting.py
STATIC_URL = '/statics/'  # 別名
這個別名用來統一HTML文件上的 statics 路徑 都會依別名在前端呈現
本地目錄可能是別的目錄名 假如是abc
STATIC_URL = '/statics/'  # 別名

STATICFILES_DIRS = (
    os.path.join(BASE_DIR,"abc"),
)

HTML裡面依舊是static不用再去HTML修改路徑
 <script src="/static/xxx.js"></script>
 一樣還是 <script src="/static/xxx.js"></script>
 但本地會去abc/xxx.js



 HTML 前面加上
 {% load staticfiles %}
 後面的static可以這樣改
 <script src="/static/xxx.js"></script>
 <script src="{% static 'jquery-3.4.1.min.js' %}"></script>




 420集
 把statics 丟到 blog 並修改setting.py
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, "blog","statics"),
)

urls.py
url(r'article/\d{4}', views.article_year),
給任何四個數字就可以訪問,但如果要取值的話要加()
url(r'article/(\d{4})', views.article_year),

views.py 就能撈到這個東西,這邊用year當行參
def article_year(request,year):
    return HttpResponse(year)

用 ?P<> 來進行分組
url(r'article_year_month/(?P<year>\d{4})/(?P<month>\d{2})', views.article_year_month),
這邊使用 year 和 month , 所以 views.py 裡面就要用相同的變數名稱
def article_year_month(request, year, month):
    return HttpResponse(year + month)


urlpatterns = [
    url(正則表達式, views視圖函數, 參數, 別名),
]

別名:
url(r'register/', views.register, name="reg"),
html裡面就可以使用 {% url reg %}
<form action="{% url reg %}" method="post">
渲染過後:
<form action="/register/" method="post">


421集 分發
mysite/urls.py 裡面放include blog , 這樣就可以分開使用urls.py
url(r'^blog/', include('blog.urls')),

blog/urls.py 下次訪問時 http://localhost:8080/blog/xxxx 以blog為開頭
把剛剛寫的register放到blog/urls.py
url(r'register/', views.register, name="reg"),
這樣就可以訪問使用register
http://localhost:8080/blog/register/


422集
request可調用的東西
print("return url_path:", request.path)
print("return url_path:", request.get_full_path())

{{ }}<~ 模板語言

寫一個登入頁面:
login.html
用 request.POST.get("user") 驗證帳號登入

423集

redriect 的用處: 會帶你跳轉到login的視圖函數去處理


if request.POST.get("user") == "leon":
    # return redirect("/login/") # 使用 redirect 會跳轉到 login url 的函數去處理
    return render(request, "login.html", locals())  # <~ 用render會跳轉頁面,但是url還是原本的register,重整頁面會回到未登入


424集
app_0728
render 和 redriect 的區別
1. 如果render 的頁面需要{{模板語言}}渲染,除了register需要寫變數, login 也要再寫,代碼會重複
2. 最重要的差別在於網址一個還是在register,一個會跳轉到login去處理 ,重新整理以後,又要重新登錄


return HttpResponse 寫法缺點：
1. 維護代價高
2. 前端發開者必須了解python
3. 效率低, 前端必須等待後端開發完成,才能寫前端(前後端一起開發效率才是最高的)


進入Django專案的環境：
python manage.py shell
from django.template import Context, Template
t = Template("my name is {{ name }} . ")
c = Context({"name":"Leon"})
t.render(c)

'my name is Leon .'

#low
for name in ('alex','leon','leo'):
    t = Template("my name is {{ name }}")
    print(t.render(Context({"name" : name })))

#good

t = Template("my name is {{ name }}")
for name in ('alex','leon','leo'):
    print(t.render(Context({"name" : name })))


模板語言:
深度查詢用句點符號 :
l = ['123','456','789']
{{l.0}}  = 123
d = {'name':'cat'}
{{ d.name}}  =  cat
c = role("leon")
{{c.Name}} = leon


425集
app_0728
filter用法：
age值加12 :  {{age|add:12}}
單字開頭字母大寫 {{test|capfirst}}
時間格式 {{t|date:'Y-m-d h:M:s'}}
空字串、空列表時,預設值為"空的" {{null|default:'空的'}}
一個字串格式的html  {{a|safe}}
{% autoescape off %}
{{a}}
{% endautoescape %}


426集
app_0728
標籤(tag)
if用法:
{% if age > 9 %} 條件達成後才顯示 {% endif %}

{% if num %}
    {% if %}
    ...
    {% else %}
    ...
    {% endif %}
{% elif %}
...
{% else %}
   ...

{% endif %}

for用法:
{% for i in l %}
{{i}}
{% endfor %}

但是list會需要遍歷index的時候就可以用forloop.counter , 他預設是從1開始計算

forloop.counter 可以用來查詢 list的 index:
{% for i in l %}
<p>{{forloop.counter}}: {{i}}</p>
{% endfor %}

可以用forloop.counter0 從零開始計算
可以用forloop.revcounter 計數倒轉過來
可以用forloop.revcounter0 計數倒轉過來,且最後一筆為0

判斷第一個是否為True,就變成紅色
{% for name in l %}
{% if forloop.first %}
  <li style="color:red">
  {% else %}
  <li>
  {% endif %}
  {{ name }}
  </li>
{% endfor %}


427集 標籤
app_0801
{% csrf_token %}：
在使用form表單提交post的時候,如果沒有加上{% csrf_token %}
會出現Forbidden (403)錯誤 CSRF verification failed. Request aborted.
這東西不是絕對安全的

{% url %}:
用於對應urls.py 裡面的name

{% with %}:
用更簡單的變量名取代更複雜的變量名
{% with total=qweqrqrsfsfsdfsdfssaf %} {{ total }} {% endwith %}

{% verbatim %}:
禁止render 渲染功能,  {{ hello }} 就只會顯示: '{{ hello }}'
{% verbatim %}
{{ hello }}
{% endverbatim %}

{% load %}:
加載標籤庫:


428集
app_0801
自定義filter:

建立一個templatetags目錄在app_427裡面
裡面建立一個myTag.py檔案:
from django import template
from django.utils.safestring import mark_safe
register =template.Library() #register 名字是固定的,無法改變
就可以用register這個裝飾器去裝飾def
@register.filter
def foo(x,y):
    return x*y

setting.py要加一串
TEMPLATES = [
    {
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            'libraries': {
                'myTag': 'app_427.templatetags.myTag',
            }
        }
    }
]

html裡面加上{% load myTag %}
就可以使用foo 這個函數
{{ t | foo:3}}

x = 7 , y = 3
右邊的y只能傳一個參數


simple_tag 和 filter如何調用：
可以不限制行參數量,只要你def宣告就行
但是不能放在if for(控制語句)裡面使用

@register.simple_tag
def simple_kenson(x,y,z):
    return x*y+z


{% simple_kenson 3 5 6 %}
{% simple_kenson t 5 6 %}



429集
template_extend_0802

template extend 與 include 延伸繼承
base當作模板給別的html套用來減少重複的代碼
base.html:
{% block content %}  <~ 自定義叫做content 的區塊
WELCOME TO LOGIN
{% endblock %}

student.html:

{% extends "base.html" %}
{% block content %}
{% for student in student_list %}
<h1>學生：{{ student }}</h1>
{% endfor %}
{% endblock %}

這樣跑student.html的時候會套用base的模板格式
而base.html中的 {% block content %} WELCOME TO LOGIN {% endblock %}
想讓WELCOME TO LOGIN 顯示出來的話就可以在students.html使用{{block.super }}

一般使用模板中 越多{% extends %} 標籤越好


在student.html中添加{% load staticfiles %}後就可以使用{% include %} 標籤了

{% include "test.html" %}
test.html 裡面的body內容 會顯示在student.html最下方


430集 模組
model(數據庫模型) -----ORM------ Object Relation Mapping

表與表之間的關係(兩張表)
    一對多
    多對多

    一對一 (unique)

--------------431集--------------
django_ORM_0804

django 默認支持sqlite mysql oracle postgresql

djaqngo的ORM:
使用python的class來對table進行操作

django驅動：
sqlite :django.db.backends.sqlite3
mysql : django.db.backends.mysql

mysql驅動：
MySQLdb(mysql python)
mysqlclient
MySQL
pyMySQL(純python的mysql驅動)

setting.py 有內建設置sqlite3
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}
加入app01
INSTALLED_APPS = (
    'app01',
)


所以打開models.py直接使用
創建一個class Book(models.Model):
執行建立:
python manage.py makemigrations app01
Migrations for 'app01':
  0001_initial.py:
    - Create model Book

app01/migrations 會出現一個0001_initial.py

使用mysql :
docker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=qa123 -d mysql

#进入容器
docker exec -it mysql bash

#登录mysql
mysql -u root -p
ALTER USER 'root'@'localhost' IDENTIFIED BY 'qa123';

#添加远程登录用户
CREATE USER 'kenson'@'%' IDENTIFIED WITH mysql_native_password BY 'qa123';
GRANT ALL PRIVILEGES ON *.* TO 'kenson'@'%';

#測試登入
mysql -u kenson -p
pwd: qa123

建立一個database
mysql> create database Django_ORM;

setting.py 裡面設定使用mysql
python manage.py makemigrations app01
執行時會報錯Error loading MySQLdb module: No module named 'MySQLdb'
這邊要在Django_ORM裡的__init__.py加上這句
import pymysql
pymysql.install_as_MySQLdb()
再執行
python manage.py makemigrations app01
python manage.py migrate
就會寫入mysql
mysql> show tables;
+----------------------------+
| Tables_in_django_ORM       |
+----------------------------+
| app01_book                 |
| auth_group                 |
| auth_group_permissions     |
| auth_permission            |
| auth_user                  |
| auth_user_groups           |
| auth_user_user_permissions |
| django_admin_log           |
| django_content_type        |
| django_migrations          |
| django_session             |
+----------------------------+
11 rows in set (0.01 sec)
mysql> use django_ORM; #切換使用 mysql table

mysql> desc app01_book;
+----------+-------------+------+-----+---------+----------------+
| Field    | Type        | Null | Key | Default | Extra          |
+----------+-------------+------+-----+---------+----------------+
| id       | int(11)     | NO   | PRI | NULL    | auto_increment |
| name     | varchar(20) | NO   |     | NULL    |                |
| price    | int(11)     | NO   |     | NULL    |                |
| pub_date | date        | NO   |     | NULL    |                |
+----------+-------------+------+-----+---------+----------------+
4 rows in set (0.02 sec)

更新：
新增一個作者class Athor後 一樣打上
python manage.py makemigrations app01
python manage.py migrate

select from 查詢資料是很消耗時間的
ORM的優點是：
假設公司原先使用mySQL 也使用SQL語法去做事
某天公司換了另一種資料庫 ,SQL語法就不適用了
ORM使我們操作可以快速簡單 ,可以無痛更換,快速開發
避免新手寫SQL語句帶來的性能問題
缺點是：
性能有所犧牲


--------------432集--------------
django_ORM_0804
數據庫增刪改查
athuor = models.CharField(max_length=32, null=False)  默認null=True 默認可以為空
python manage.py makemigrations
執行時會出現athuor 需要默認值的問題
You are trying to add a non-nullable field 'athuor'
選1 給他一個默認值為"alex"

表紀錄的添加：
views與urls 新增
index與addbook
views 裡面加上 from app01.models import *
添加方式一：
b = Book(name="python基礎", price=99, author="alex", pub_date="2019-08-04")
b.save()
mysql> select * from app01_book;
+----+----------+-------+------------+--------+
| id | name     | price | pub_date   | author |
+----+----------+-------+------------+--------+
|  1 | python?? |    99 | 2019-08-04 | alex   |
+----+----------+-------+------------+--------+

添加方式二：
Book.objects.create(name="Linux", price=199, author="alex3", pub_date="2019-08-04")
Book.objects.create(**dic) <~也可以用字典


修改：
方式一：
Book.objects.filter(author="alex").update(price=999) #filter用於取多筆

方式二：
b = Book.objects.get(author="alex") #get 用於搜索單筆的時候
b.price = 100
b.save()
type(b) : QuerySet這是django產生的一個數據集合類型

刪除：
Book.objects.filter(author="alex3").delete()


--------------433集--------------
django_ORM_0804
查詢:
Book.objects.all()
返回的是一個QuerySet集合：
[<Book: Book object>, <Book: Book object>, <Book: Book object>]
Book.objects.all()[::-1]  # 倒著取

Book.objects.first() # 獲得單筆資料 所以不能用於迭代
Book.objects.last() # 獲得單筆資料 所以不能用於迭代
Book.objects.get(id=5) # 獲得單筆資料 所以不能用於迭代 ,如果獲得超過1筆以上的結果會報錯
Book.objects.filter(id=2) # 可迭代對象
Book.objects.filter(author="alex").values("name")

Book.objects.filter(author="alex").values("name","price") #返回字典
<QuerySet [{'name': 'Golang', 'price': 199}, {'name': 'MySQL', 'price': 299}]>

Book.objects.filter(author="alex").values_list("name","price") #返回元祖
<QuerySet [('Golang', 199), ('MySQL', 299)]>

exclude(**kwargs) filter的相反,篩選不匹配的對象
Book.objects.exclude(author="alex").values_list("name","price")

Book.objects.all().values("name").distinct()  #去重複


--------------434集--------------
django_ORM_0804
萬能的雙底線 __
Book.objects.filter(price__gt=50) 價格大於50
__gte  大於等於
__lte 下於等於
__contains  模糊查找
__icontains 模糊查詢不區分大小寫
Book.objects.filter(id__lt=10, id__gt=1) id大於1 且小於10的
Book.objects.filter(id__in=[10,20,30]) id 等於 10、20、30的數據
Book.objects.exclude(id__in=[10,20,30]) id 不等於 10、20、30的數據
Book.objects.filter(name__contains="alex")
Book.objects.filter(name__icontains="alex") 大小寫不敏感
Book.objects.filter(name__range=[1,2]) 範圍之間
11

